## 基本機能

* 講義のコンテンツはすべてテキストファイルで作成できます．
  版管理には Git を使うことを推奨しています．

* 様々な種類の課題を作成することができます．
  * 任意のタイプのファイルを提出させることが可能です．
    提出を許可するファイルタイプを指定できます．
  * プレーンテキスト形式の課題を作成することができます．
  * HTMLフォームによる課題を作成することができます．
    選択問題を作成したり，アンケートとしても活用できます．
  * プログラミング課題を作成することができます．
    サーバーのサンドボックス環境で実行することができ，
    その結果をブラウザで即座に確認することができます．
    さらに，テストケースによる自動検証にも対応しています．
  * これらを任意に組み合わせた課題を作成することができます．

* ページは HTML 形式または Markdown 形式で記述でき，また，標準で MathJax と連携できます．

* 動的なコンテンツを [ERB](https://docs.ruby-lang.org/ja/latest/class/ERB.html) により作成できます．
  例えば，閲覧中のユーザーの情報を参照して，ユーザー毎に異なる挙動をするようなコンテンツを作成することができます．

* ページには課題やほかのページを埋め込むことができます．

* 講義のコンテンツデータは，WWW に(認証なし/認証付きで)公開されている Git リポジトリからインポートすることができます．
  * インポートした講義は，手動で最新のコンテンツに同期することができます．
  * ハッシュキーを割り当てることで，WebHooks による自動同期も可能です．
    すなわち，GitHub や GitLab で講義データを管理すれば，
    `git push origin master` とするだけで更新ができるだけでなく，
    GitHub や GitLab がそのままエディタになります．
  * 講義データをほかの教員と共有することも推奨しています．
 
